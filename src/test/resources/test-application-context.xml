<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="
    	   http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
           http://www.springframework.org/schema/cache 
           http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.1.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
           http://www.springframework.org/schema/tx  
           http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<context:annotation-config />

	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- 开启缓存注解 -->
	<cache:annotation-driven />


	<!-- jedis客户端连接工厂 redis.minIdle 初始化连接数- redis.maxIdle 控制一个pool最多有多少个状态为idle(空闲的)的jedis实例。 
		redis.maxWaitMillis 表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException； 
		redis.testOnBorrow 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的； -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig"
		p:minIdle='${redis.minIdle}' p:maxIdle='${redis.maxIdle}'
		p:maxWaitMillis='${redis.maxWaitMillis}' p:testOnBorrow='${redis.testOnBorrow}' />

	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name='${redis.host}' p:port='${redis.port}' p:usePool='${redis.usePool}'
		c:poolConfig-ref='poolConfig' />

	<!-- redis Template模板 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>

	<!-- redis 缓存管理器 -->
	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"
		c:template-ref='redisTemplate' />
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:test-druid-db.properties</value>
				<value>classpath:test-redis.properties</value>
				<value>classpath:test-druid-db.properties</value>
				<value>classpath:test-webservice.properties</value>
				<value>classpath:test-system.properties</value>
				<value>classpath:test-schedule.properties</value>
			</list>
		</property>
	</bean>
	<context:component-scan base-package="com.mobile.blue.launcher" />
	<context:component-scan base-package="com.mobile.blue.filter" />
	<context:component-scan base-package="com.mobile.blue.aop" />
	<import resource="test-applicationContext-druid-db.xml" />
	<import resource="test-schedule-task.xml" />
	
	
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="utf-8">

		<property name="maxUploadSize" value="10000000" />

	</bean>
</beans>